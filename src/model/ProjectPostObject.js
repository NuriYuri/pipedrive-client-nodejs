/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectObjectFragment from './ProjectObjectFragment';
import ProjectPostObjectAllOf from './ProjectPostObjectAllOf';
import RequiredPostProjectParameters from './RequiredPostProjectParameters';

/**
 * The ProjectPostObject model module.
 * @module model/ProjectPostObject
 * @version 1.0.0
 */
class ProjectPostObject {
    /**
     * Constructs a new <code>ProjectPostObject</code>.
     * @alias module:model/ProjectPostObject
     * @implements module:model/RequiredPostProjectParameters
     * @implements module:model/ProjectObjectFragment
     * @implements module:model/ProjectPostObjectAllOf
     * @param title {String} The title of the project
     * @param boardId {Number} The ID of a project board
     * @param phaseId {Number} The ID of a phase on a project board
     */
    constructor(title, boardId, phaseId) { 
        RequiredPostProjectParameters.initialize(this, title, boardId, phaseId);ProjectObjectFragment.initialize(this);ProjectPostObjectAllOf.initialize(this);
        ProjectPostObject.initialize(this, title, boardId, phaseId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, boardId, phaseId) { 
        obj['title'] = title;
        obj['board_id'] = boardId;
        obj['phase_id'] = phaseId;
    }

    /**
     * Constructs a <code>ProjectPostObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectPostObject} obj Optional instance to populate.
     * @return {module:model/ProjectPostObject} The populated <code>ProjectPostObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectPostObject();
            RequiredPostProjectParameters.constructFromObject(data, obj);
            ProjectObjectFragment.constructFromObject(data, obj);
            ProjectPostObjectAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');

                delete data['title'];
            }
            if (data.hasOwnProperty('board_id')) {
                obj['board_id'] = ApiClient.convertToType(data['board_id'], 'Number');

                delete data['board_id'];
            }
            if (data.hasOwnProperty('phase_id')) {
                obj['phase_id'] = ApiClient.convertToType(data['phase_id'], 'Number');

                delete data['phase_id'];
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');

                delete data['description'];
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');

                delete data['status'];
            }
            if (data.hasOwnProperty('owner_id')) {
                obj['owner_id'] = ApiClient.convertToType(data['owner_id'], 'Number');

                delete data['owner_id'];
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');

                delete data['start_date'];
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');

                delete data['end_date'];
            }
            if (data.hasOwnProperty('deal_ids')) {
                obj['deal_ids'] = ApiClient.convertToType(data['deal_ids'], ['Number']);

                delete data['deal_ids'];
            }
            if (data.hasOwnProperty('org_id')) {
                obj['org_id'] = ApiClient.convertToType(data['org_id'], 'Number');

                delete data['org_id'];
            }
            if (data.hasOwnProperty('person_id')) {
                obj['person_id'] = ApiClient.convertToType(data['person_id'], 'Number');

                delete data['person_id'];
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['Number']);

                delete data['labels'];
            }
            if (data.hasOwnProperty('template_id')) {
                obj['template_id'] = ApiClient.convertToType(data['template_id'], 'Number');

                delete data['template_id'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The title of the project
 * @member {String} title
 */
ProjectPostObject.prototype['title'] = undefined;

/**
 * The ID of a project board
 * @member {Number} board_id
 */
ProjectPostObject.prototype['board_id'] = undefined;

/**
 * The ID of a phase on a project board
 * @member {Number} phase_id
 */
ProjectPostObject.prototype['phase_id'] = undefined;

/**
 * The description of the project
 * @member {String} description
 */
ProjectPostObject.prototype['description'] = undefined;

/**
 * The status of the project
 * @member {String} status
 */
ProjectPostObject.prototype['status'] = undefined;

/**
 * The ID of a project owner
 * @member {Number} owner_id
 */
ProjectPostObject.prototype['owner_id'] = undefined;

/**
 * The start date of the project. Format: YYYY-MM-DD.
 * @member {Date} start_date
 */
ProjectPostObject.prototype['start_date'] = undefined;

/**
 * The end date of the project. Format: YYYY-MM-DD.
 * @member {Date} end_date
 */
ProjectPostObject.prototype['end_date'] = undefined;

/**
 * An array of IDs of the deals this project is associated with
 * @member {Array.<Number>} deal_ids
 */
ProjectPostObject.prototype['deal_ids'] = undefined;

/**
 * The ID of the organization this project is associated with
 * @member {Number} org_id
 */
ProjectPostObject.prototype['org_id'] = undefined;

/**
 * The ID of the person this project is associated with
 * @member {Number} person_id
 */
ProjectPostObject.prototype['person_id'] = undefined;

/**
 * An array of IDs of the labels this project has
 * @member {Array.<Number>} labels
 */
ProjectPostObject.prototype['labels'] = undefined;

/**
 * The ID of the template the project will be based on
 * @member {Number} template_id
 */
ProjectPostObject.prototype['template_id'] = undefined;


// Implement RequiredPostProjectParameters interface:
/**
 * The title of the project
 * @member {String} title
 */
RequiredPostProjectParameters.prototype['title'] = undefined;
/**
 * The ID of a project board
 * @member {Number} board_id
 */
RequiredPostProjectParameters.prototype['board_id'] = undefined;
/**
 * The ID of a phase on a project board
 * @member {Number} phase_id
 */
RequiredPostProjectParameters.prototype['phase_id'] = undefined;
// Implement ProjectObjectFragment interface:
/**
 * The description of the project
 * @member {String} description
 */
ProjectObjectFragment.prototype['description'] = undefined;
/**
 * The status of the project
 * @member {String} status
 */
ProjectObjectFragment.prototype['status'] = undefined;
/**
 * The ID of a project owner
 * @member {Number} owner_id
 */
ProjectObjectFragment.prototype['owner_id'] = undefined;
/**
 * The start date of the project. Format: YYYY-MM-DD.
 * @member {Date} start_date
 */
ProjectObjectFragment.prototype['start_date'] = undefined;
/**
 * The end date of the project. Format: YYYY-MM-DD.
 * @member {Date} end_date
 */
ProjectObjectFragment.prototype['end_date'] = undefined;
/**
 * An array of IDs of the deals this project is associated with
 * @member {Array.<Number>} deal_ids
 */
ProjectObjectFragment.prototype['deal_ids'] = undefined;
/**
 * The ID of the organization this project is associated with
 * @member {Number} org_id
 */
ProjectObjectFragment.prototype['org_id'] = undefined;
/**
 * The ID of the person this project is associated with
 * @member {Number} person_id
 */
ProjectObjectFragment.prototype['person_id'] = undefined;
/**
 * An array of IDs of the labels this project has
 * @member {Array.<Number>} labels
 */
ProjectObjectFragment.prototype['labels'] = undefined;
// Implement ProjectPostObjectAllOf interface:
/**
 * The ID of the template the project will be based on
 * @member {Number} template_id
 */
ProjectPostObjectAllOf.prototype['template_id'] = undefined;




export default ProjectPostObject;

